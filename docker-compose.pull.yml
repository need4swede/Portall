services:
  # Init container to set up proper permissions for the database directory
  portall-init:
    image: alpine:latest
    container_name: portall-init
    command: |
      sh -c "
        echo 'Setting up instance directory permissions...'
        mkdir -p /app/instance
        chmod 777 /app/instance
        # Try to set ownership to the user that will run the main container
        chown ${USER_ID:-1000}:${GROUP_ID:-1000} /app/instance 2>/dev/null || echo 'Note: Could not change ownership (this is normal in some environments)'
        echo 'Instance directory setup complete:'
        ls -la /app/instance
        echo 'Permissions setup complete'
      "
    volumes:
      - ./instance:/app/instance
    user: "0:0"  # Run as root to set permissions
    restart: "no"  # Only run once

  # Main Portall application
  portall:
    image: need4swede/portall:latest
    container_name: portall
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    depends_on:
      - socket-proxy
      - portall-init  # Wait for permissions to be set
    ports:
      - "8080:8080"
    environment:
      - SECRET_KEY=your_secret_key
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOCKER_ENABLED=true
    volumes:
      - ./instance:/app/instance
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    networks:
      - portall-network

  # Docker Socket Proxy with automatic GID detection
  socket-proxy:
    image: need4swede/portall-socket-proxy:latest
    container_name: portall-socket-proxy
    environment:
      - ALLOW_RESTARTS=0
      - ALLOW_START=0
      - ALLOW_STOP=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "127.0.0.1:2375:2375"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run/proxy
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    networks:
      - portall-network

# Alternative: Manual GID configuration (if automatic detection doesn't work)
# Uncomment this service and comment out the one above if you need manual control
# socket-proxy-manual:
#   image: 11notes/socket-proxy:stable
#   container_name: portall-socket-proxy-manual
#   # Platform-specific user configuration for Docker socket access
#   # Uncomment the line that matches your platform:
#   user: "0:998"     # Linux (Ubuntu/Debian)
#   # user: "0:999"   # Linux (CentOS/RHEL/Arch) or Mac/Windows Docker Desktop
#   # user: "0:994"   # Linux (older CentOS/RHEL)
#   # user: "0:992"   # Linux (some RHEL variants)
#   # user: "0:1"     # macOS Docker Desktop (common)
#   # user: "0:0"     # Root fallback
#   # To find your Docker GID: stat -c '%g' /var/run/docker.sock (Linux) or stat -f '%g' /var/run/docker.sock (macOS)
#   environment:
#     - ALLOW_RESTARTS=0
#     - ALLOW_START=0
#     - ALLOW_STOP=0
#   volumes:
#     - /var/run/docker.sock:/var/run/docker.sock:ro
#   ports:
#     - "127.0.0.1:2375:2375"
#   restart: unless-stopped
#   security_opt:
#     - no-new-privileges:true
#   read_only: true
#   tmpfs:
#     - /tmp
#     - /run/proxy
#   cap_drop:
#     - ALL
#   cap_add:
#     - CHOWN
#     - SETGID
#     - SETUID
#   networks:
#     - portall-network

networks:
  portall-network:
    driver: bridge
